org: gfc0r
service: api-productos-categorias

custom:
  productsTableName:   ${self:service}-${self:provider.stage}-t_productos
  categoriesTableName: ${self:service}-${self:provider.stage}-t_categorias

  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  runtime: python3.12
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  memorySize: 1024
  timeout: 30

  environment:
    PRODUCTS_TABLE:   ${self:custom.productsTableName}
    CATEGORIES_TABLE: ${self:custom.categoriesTableName}
    JWT_SECRET: tu_clave_secreta_super_segura

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.productsTableName}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.categoriesTableName}

functions:
  createProduct:
    handler: create_product.lambda_handler
    events:
      - http:
          path: productos/crear
          method: post
          cors: true

  updateProduct:
    handler: update_product.lambda_handler
    events:
      - http:
          path: productos/modificar
          method: put
          cors: true

  deleteProduct:
    handler: delete_product.lambda_handler
    events:
      - http:
          path: productos/eliminar
          method: delete
          cors: true

  getProductById:
    handler: get_product_by_id.lambda_handler
    events:
      - http:
          path: productos/obtener
          method: get
          cors: true

  listProducts:
    handler: list_products.lambda_handler
    events:
      - http:
          path: productos/listar
          method: get
          cors: true

  createCategory:
    handler: create_category.lambda_handler
    events:
      - http:
          path: categorias/crear
          method: post
          cors: true

  updateCategory:
    handler: update_category.lambda_handler
    events:
      - http:
          path: categorias/modificar
          method: put
          cors: true

  deleteCategory:
    handler: delete_category.lambda_handler
    events:
      - http:
          path: categorias/eliminar
          method: delete
          cors: true

  listCategories:
    handler: list_categories.lambda_handler
    events:
      - http:
          path: categorias/listar
          method: get
          cors: true

  verifyToken:
    handler: verify_token.lambda_handler
    events:
      - http:
          path: usuarios/verify
          method: get
          cors: true

resources:
  Resources:
    ProductosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.productsTableName}
        AttributeDefinitions:
          - AttributeName: empresa
            AttributeType: S
          - AttributeName: id_producto
            AttributeType: S
        KeySchema:
          - AttributeName: empresa
            KeyType: HASH
          - AttributeName: id_producto
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    CategoriasTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.categoriesTableName}
        AttributeDefinitions:
          - AttributeName: empresa
            AttributeType: S
          - AttributeName: id_categoria_producto
            AttributeType: S
        KeySchema:
          - AttributeName: empresa
            KeyType: HASH
          - AttributeName: id_categoria_producto
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-python-requirements
